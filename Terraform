ðŸ”¹ 1. Basics (Every DevOps Engineer Should Know)
What is Terraform?

IaC tool (Infrastructure as Code) â†’ declarative, idempotent, provider-agnostic.

Core Concepts

Providers â†’ AWS, Azure, GCP, Kubernetes, etc.

Resources â†’ actual infra components (EC2, S3, VPC, EKS).

State File (terraform.tfstate) â†’ stores real infra mapping.

Terraform Block (terraform {}) â†’ defines version & backend.

Variables â†’ input values for reusability.

Outputs â†’ return values (public_ip, DNS).

Locals â†’ computed values.

Resource Lifecycle

create_before_destroy â†’ avoids downtime.

prevent_destroy â†’ protects critical resources.

Backends

Local â†’ default (on disk).

Remote â†’ S3, GCS, Azure Blob, Terraform Cloud.

Basic Commands

terraform init â†’ initialize backend & providers.

terraform plan â†’ preview changes.

terraform apply â†’ create infra.

terraform destroy â†’ delete infra.

terraform validate â†’ validate code.

terraform fmt â†’ format code.

âœ… Foundation every DevOps engineer must know.

ðŸ”¹ 2. Medium-Level Concepts
Terraform Registry

Official + Community modules (AWS VPC, EKS, etc.).

Reuse existing modules instead of writing from scratch.

Terraform CLI Useful Commands

terraform show â†’ show resources.

terraform state list â†’ list resources in state.

terraform state rm â†’ remove from state.

terraform taint â†’ force recreate a resource.

terraform graph â†’ visualize dependency graph.

Terraform Modules

Reusable code blocks (Best practice for production).

Structure â†’ main.tf, variables.tf, outputs.tf.

Remote State

Store state in S3, lock with DynamoDB.

Avoids local conflicts in teams.

File Organization

Split configs â†’ provider.tf, backend.tf, variables.tf, outputs.tf.

Environment Variables

TF_VAR_name â†’ auto-loads into variables.

AWS_PROFILE, GOOGLE_APPLICATION_CREDENTIALS â†’ provider auth.

Lock Files

.terraform.lock.hcl â†’ locks provider versions.

CLI Config

~/.terraformrc or CLI_CONFIG_FILE â†’ creds helper, registry mirror.

âœ… Medium level prepares you for team projects & CI/CD integration.

ðŸ”¹ 3. Advanced Concepts (DevOps Specific)
Terraform Functions

file(), lookup(), join(), merge(), base64encode().

Conditional Expressions
count = var.enabled ? 1 : 0

Count vs For-Each

count â†’ index-based multiple resources.

for_each â†’ map/set-based infra creation.

Dynamic Blocks

Used in complex resources (security groups, IAM policies).

Data Sources

Fetch existing infra (ex: data "aws_ami").

Import

terraform import aws_instance.myec2 i-12345678.

Null Resource + Provisioners

Run scripts via local-exec / remote-exec.

Workspaces

Manage environments (dev, staging, prod).

Lifecycle Meta-Arguments

ignore_changes â†’ donâ€™t overwrite manual changes.

replace_triggered_by â†’ force recreation if dependency changes.

Backend Config Overrides

terraform init -backend-config=backend.hcl.

Plan File

terraform plan -out=tfplan â†’ terraform apply tfplan.

Performance

Use depends_on for ordering.

Split state files (per project/module).

Testing

terraform validate, terraform plan -detailed-exitcode.

Terratest (Go) for automated testing.

Drift Detection

Compare real infra vs Terraform state.

Custom Providers

Written in Go for unsupported services.

Terraform Cloud / Enterprise

Remote runs, teams & RBAC.

Sentinel â†’ policy-as-code.

âœ… Advanced topics = FAANG panel favorites.

ðŸ”¹ 4. Real-World DevOps Scenarios
Terraform with AWS

Provision EC2, VPC, EKS, S3, ALB, ASG.

Store state in S3 + DynamoDB locking.

Terraform + Kubernetes (EKS)

Deploy EKS cluster, manage via kubernetes provider.

Terraform CI/CD

Jenkins/GitHub Actions â†’ fmt â†’ validate â†’ plan â†’ apply.

Secrets Management

Use SSM Parameter Store / AWS Secrets Manager / Vault.

Avoid storing secrets in tfstate.

Failure Recovery

If apply fails â†’ rerun. Terraform reconciles state.

Version Management

Lock Terraform version â†’ required_version.

Blue-Green Infra

Manage environments via workspaces or modules.

Hybrid Cloud

One config for AWS + Azure + GCP.

GitOps with Terraform

Use Atlantis/Spacelift â†’ PR-based infra changes.

State File Security

S3 encryption + IAM restricted access.

Multi-Region Deployments

Provider aliasing â†’

provider "aws" {
  alias  = "use1"
  region = "us-east-1"
}

Cross-Account Infra

Assume roles via STS + provider alias.

Cost Optimization

Use Spot instances.

Lifecycle rules â†’ auto-cleanup unused infra.

âœ… Real-world scenarios make you production-ready.
