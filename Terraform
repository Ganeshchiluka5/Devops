ðŸ”¹ 1. Basics (Every DevOps Engineer Should Know)

What is Terraform?
IaC tool (Infrastructure as Code) â†’ declarative, idempotent, provider-agnostic.

Core Concepts

Providers â†’ AWS, Azure, GCP, Kubernetes, etc.

Resources â†’ actual infra components (EC2, S3, VPC, EKS).

State File (terraform.tfstate) â†’ stores real infra mapping.

Variables â†’ input variables for reusability.

Outputs â†’ return values (public_ip, DNS).

Locals â†’ computed values.

Basic Commands

terraform init â†’ initialize backend & providers

terraform plan â†’ preview changes

terraform apply â†’ create infra

terraform destroy â†’ delete infra

terraform validate â†’ validate code

terraform fmt â†’ format code

âœ… This is the foundation every DevOps engineer must know.

ðŸ”¹ 2. Medium Concepts

Terraform Registry

Official + Community modules (AWS VPC, EKS, etc.)

Reuse existing modules instead of writing from scratch

Terraform CLI Useful Commands

terraform show â†’ show resources

terraform state list â†’ list resources in state

terraform state rm â†’ remove from state

terraform taint â†’ force recreate a resource

terraform graph â†’ visualize dependency graph

Terraform Modules

Reusable code blocks (Best practice for production)

Structure â†’ main.tf, variables.tf, outputs.tf

Terraform Remote State

Store state in S3, lock with DynamoDB

Avoids local state conflicts in teams

âœ… This level prepares you for team projects & CI/CD integration.

ðŸ”¹ 3. Advanced Concepts (DevOps Specific)

Terraform Functions

file(), lookup(), join(), merge(), base64encode()

Conditional Expressions

count = var.enabled ? 1 : 0

For Each & Count

Create multiple resources dynamically

Dynamic Blocks

Used in complex resources (security groups, IAM policies)

Data Sources

Fetch existing infra (ex: data "aws_ami")

Null Resource + Provisioners

Execute scripts via local-exec / remote-exec

Workspaces

Manage multiple environments (dev, staging, prod)

Terraform Performance

Use depends_on for ordering

Split state files (per module/project)

Terraform Testing

terraform validate, terraform plan -detailed-exitcode for CI

Terratest (Go framework) for automated testing

Terraform Custom Providers

Written in Go for non-supported services

âœ… These are the hard-hitting interview points most DevOps candidates miss.

ðŸ”¹ 4. Real-World DevOps Scenarios

Terraform with AWS

Provision EC2, VPC, EKS, S3, ALB, ASG using IaC

Store state in S3 with DynamoDB locking

Terraform + Kubernetes (EKS)

Deploy EKS cluster, manage via Terraform provider

Terraform CI/CD

Jenkins/GitHub Actions â†’ terraform fmt â†’ validate â†’ plan â†’ apply

Secrets Management

Use SSM Parameter Store / AWS Secrets Manager / Vault

Terraform Apply Failure Recovery

Re-run apply â†’ Terraform reconciles state

Terraform Upgrade/Downgrade

Lock Terraform version â†’ required_version

Blue-Green Infra

Manage multiple environments via workspaces or modules

Hybrid Cloud

One Terraform config for AWS + Azure + GCP

Cost Optimization

Spot instances, lifecycle rules, destroy unused infra
